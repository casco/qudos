---
export interface Props {
  buttonTextCollapsed?: string;
  buttonTextExpanded?: string;
}

const {
  buttonTextCollapsed = 'Mostrar Detalles', // Default text when collapsed in Spanish
  buttonTextExpanded = 'Ocultar Detalles',   // Default text when expanded in Spanish
} = Astro.props;
---

<div class="collapsible-container">
  <button
    class="collapsible-button"
    aria-expanded="false"
    data-text-collapsed={buttonTextCollapsed}
    data-text-expanded={buttonTextExpanded}
  >
    {buttonTextCollapsed}
  </button>
  <div class="collapsible-content" aria-hidden="true">
    <div class="collapsible-content-inner">
      <slot />
    </div>
  </div>
</div>

<style>
  .collapsible-container {
    margin-bottom: 1rem;
    border: 1px solid var(--sl-color-gray-5); 
    border-radius: 0.5rem;
    padding: 1rem;
    background-color: var(--sl-color-bg-surface-raised);
  }

  .collapsible-button {
    background-color: var(--sl-color-accent-low);
    color: var(--sl-color-accent-high);
    border: 1px solid var(--sl-color-accent-high);
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.2s ease-in-out;
    margin-bottom: 0.75rem;
    display: block;
    width: auto;
  }

  .collapsible-button:hover,
  .collapsible-button:focus {
    background-color: var(--sl-color-accent-high);
    color: var(--sl-color-bg);
  }

  .collapsible-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.35s ease-in-out, opacity 0.3s ease-out 0.05s, visibility 0.3s ease-out 0.05s;
    opacity: 0;
    visibility: hidden;
  }

  .collapsible-content.open {
    opacity: 1;
    visibility: visible;
    transition: max-height 0.35s ease-in-out, opacity 0.3s ease-in, visibility 0.3s ease-in;
  }

  .collapsible-content-inner {
    padding-bottom: 1px;
  }
</style>

<script>
  document.querySelectorAll('.collapsible-container').forEach(container => {
    const button = container.querySelector('.collapsible-button') as HTMLButtonElement | null;
    const contentWrapper = container.querySelector('.collapsible-content') as HTMLElement | null;
    const contentInner = container.querySelector('.collapsible-content-inner') as HTMLElement | null;

    if (!button || !contentWrapper || !contentInner) {
      console.error('Collapsible component missing required elements within:', container);
      return;
    }

    // Leer los textos desde los atributos data-* del botón específico
    const textCollapsed = button.dataset.textCollapsed || 'Mostrar Detalles';
    const textExpanded = button.dataset.textExpanded || 'Ocultar Detalles';

    // El texto inicial ya se establece en el HTML del botón durante el renderizado del servidor.
    // button.textContent = textCollapsed; // No es necesario aquí si el HTML ya lo tiene.

    button.addEventListener('click', () => {
      const isOpen = contentWrapper.classList.contains('open');

      if (isOpen) {
        // Close it
        contentWrapper.style.maxHeight = '0px';
        contentWrapper.classList.remove('open');
        button.setAttribute('aria-expanded', 'false');
        contentWrapper.setAttribute('aria-hidden', 'true');
        button.textContent = textCollapsed; // Usar el texto para colapsado específico de esta instancia
      } else {
        // Open it
        requestAnimationFrame(() => {
            contentWrapper.style.maxHeight = contentInner.scrollHeight + 'px';
            contentWrapper.classList.add('open');
            button.setAttribute('aria-expanded', 'true');
            contentWrapper.setAttribute('aria-hidden', 'false');
            button.textContent = textExpanded; // Usar el texto para expandido específico de esta instancia
        });
      }
    });
  });
</script>
